package service

import (
	"fmt"
	"io"
	"net/http"

	"github.com/bytedance/sonic"
	"github.com/jz0ojiang/go-maimai-player-counter/db"
)

// 从 map.bemanicn.com 数据
// 所有发往 map.bemanicn.com 的请求都需要带上 X-Inertia = true

func _get(url string) (resp *http.Response, err error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return resp, err
	}
	req.Header.Add("X-Inertia", "true")
	resp, err = client.Do(req)
	if err != nil {
		return resp, err
	}
	return resp, nil
}

// Generated by https://quicktype.io

type GetDataByGameResponse struct {
	Component string                     `json:"component"`
	Props     GetDataByGameResponseProps `json:"props"`
	URL       string                     `json:"url"`
	Version   string                     `json:"version"`
}

type GetDataByGameResponseProps struct {
	Errors      GetDataByGameResponseErrors  `json:"errors"`
	Auth        GetDataByGameResponseAuth    `json:"auth"`
	Session     GetDataByGameResponseSession `json:"session"`
	ID          string                       `json:"id"`
	Name        string                       `json:"name"`
	City        interface{}                  `json:"city"`
	Provinces   map[string]string            `json:"provinces"`
	Cities      map[string]string            `json:"cities"`
	Arcades     GetDataByGameResponseArcades `json:"arcades"`
	ArcadeCount string                       `json:"arcade_count"`
}

type GetDataByGameResponseArcades struct {
	CurrentPage  int64                        `json:"current_page"`
	Data         []GetDataByGameResponseDatum `json:"data"`
	FirstPageURL string                       `json:"first_page_url"`
	From         int64                        `json:"from"`
	LastPage     int64                        `json:"last_page"`
	LastPageURL  string                       `json:"last_page_url"`
	Links        []GetDataByGameResponseLink  `json:"links"`
	NextPageURL  string                       `json:"next_page_url"`
	Path         string                       `json:"path"`
	PerPage      int64                        `json:"per_page"`
	PrevPageURL  interface{}                  `json:"prev_page_url"`
	To           int64                        `json:"to"`
	Total        int64                        `json:"total"`
}

type GetDataByGameResponseDatum struct {
	ID        int64                     `json:"id"`
	TitleID   int64                     `json:"title_id"`
	ShopID    int64                     `json:"shop_id"`
	Quantity  int64                     `json:"quantity"`
	Coin      int64                     `json:"coin"`
	Version   string                    `json:"version"`
	Comment   *string                   `json:"comment"`
	CreatedAt string                    `json:"created_at"`
	Shop      GetDataByGameResponseShop `json:"shop"`
}

type GetDataByGameResponseShop struct {
	ID           int64  `json:"id"`
	Name         string `json:"name"`
	ProvinceCode string `json:"province_code"`
	CityCode     string `json:"city_code"`
}

type GetDataByGameResponseLink struct {
	URL    *string `json:"url"`
	Label  string  `json:"label"`
	Active bool    `json:"active"`
}

type GetDataByGameResponseAuth struct {
	User  interface{}   `json:"user"`
	Roles []interface{} `json:"roles"`
}

type GetDataByGameResponseErrors struct {
}

type GetDataByGameResponseSession struct {
	Success interface{} `json:"success"`
	Message interface{} `json:"message"`
	Error   interface{} `json:"error"`
}

func GetArcadeListWithArcadeMap() ([]Arcade, error) {
	var rawarcades []GetDataByGameResponseDatum
	from := 0
	to := 0
	// 从 https://map.bemanicn.com/games/1 获取所有包含 maimaiDX 的机厅
	// 首先获取 props.arcades.from 与 props.arcades.last_page 的值（页码数量）
	// 循环 props.arcades.from 到 props.arcades.last_page，获取每一页的数据
	// 获取 https://map.bemanicn.com/games/1?page={current} 的数据
	// 每一页的数据为 props.arcades.data
	// 将每一页的数据添加到 rawarcades 中
	response, err := _get("https://map.bemanicn.com/games/1")
	if err != nil {
		return nil, err
	}
	// 从 response 中获取 props.arcades.from 与 props.arcades.last_page 的值（页码数量）
	defer response.Body.Close()
	body, err := io.ReadAll(response.Body)
	if err != nil {
		return nil, err
	}
	var data GetDataByGameResponse
	err = sonic.Unmarshal(body, &data)
	if err != nil {
		return nil, err
	}
	from = int(data.Props.Arcades.From)
	to = int(data.Props.Arcades.LastPage)
	// 循环 props.arcades.from 到 props.arcades.last_page，获取每一页的数据
	for i := from; i <= to; i++ {
		response, err := _get(fmt.Sprintf("https://map.bemanicn.com/games/1?page=%d", i))
		if err != nil {
			return nil, err
		}
		// 每一页的数据为 props.arcades.data
		defer response.Body.Close()
		body, err := io.ReadAll(response.Body)
		if err != nil {
			return nil, err
		}
		var data GetDataByGameResponse
		err = sonic.Unmarshal(body, &data)
		if err != nil {
			return nil, err
		}
		// 将每一页的数据添加到 rawarcades 中
		rawarcades = append(rawarcades, data.Props.Arcades.Data...)
	}
	var arcades []Arcade
	for _, arcade := range rawarcades {
		if (arcade.Shop == GetDataByGameResponseShop{}) {
			continue
		}
		province, _ := GetProvinceByCode(arcade.Shop.ProvinceCode)
		city, _ := GetCityByCode(arcade.Shop.CityCode)
		arcades = append(arcades, Arcade{
			ID:           int(arcade.Shop.ID),
			Name:         arcade.Shop.Name,
			MachineCount: int(arcade.Quantity),
			Province:     province,
			City:         city,
		})
	}
	return arcades, nil
}

// Generated by https://quicktype.io

type GetDataByArcadeResponse struct {
	Component string                       `json:"component"`
	Props     GetDataByArcadeResponseProps `json:"props"`
	URL       string                       `json:"url"`
	Version   string                       `json:"version"`
}

type GetDataByArcadeResponseProps struct {
	Errors      GetDataByArcadeResponseErrors  `json:"errors"`
	Auth        GetDataByArcadeResponseAuth    `json:"auth"`
	Session     GetDataByArcadeResponseSession `json:"session"`
	Shop        GetDataByArcadeResponseShop    `json:"shop"`
	ImagesCount int64                          `json:"images_count"`
	Provinces   map[string]string              `json:"provinces"`
	Cities      map[string]string              `json:"cities"`
	Counties    map[string]string              `json:"counties"`
	Titles      GetDataByArcadeResponseTitles  `json:"titles"`
}

type GetDataByArcadeResponseAuth struct {
	User  interface{}   `json:"user"`
	Roles []interface{} `json:"roles"`
}

type GetDataByArcadeResponseErrors struct {
}

type GetDataByArcadeResponseSession struct {
	Success interface{} `json:"success"`
	Message interface{} `json:"message"`
	Error   interface{} `json:"error"`
}

type GetDataByArcadeResponseShop struct {
	ID            int64                                 `json:"id"`
	ProvinceCode  string                                `json:"province_code"`
	CityCode      string                                `json:"city_code"`
	CountyCode    string                                `json:"county_code"`
	Status        int64                                 `json:"status"`
	PayType       int64                                 `json:"pay_type"`
	Locked        int64                                 `json:"locked"`
	EaStatus      int64                                 `json:"ea_status"`
	StartTime     int64                                 `json:"start_time"`
	EndTime       int64                                 `json:"end_time"`
	Name          string                                `json:"name"`
	NamePinyin    string                                `json:"name_pinyin"`
	Address       string                                `json:"address"`
	Transport     string                                `json:"transport"`
	Longitude     string                                `json:"longitude"`
	Latitude      string                                `json:"latitude"`
	Geohash       interface{}                           `json:"geohash"`
	Price         string                                `json:"price"`
	URL           interface{}                           `json:"url"`
	Comment       string                                `json:"comment"`
	DeletedAt     interface{}                           `json:"deleted_at"`
	CreatedAt     string                                `json:"created_at"`
	UpdatedAt     string                                `json:"updated_at"`
	Arcades       []GetDataByArcadeResponseArcade       `json:"arcades"`
	RecentChanges []GetDataByArcadeResponseRecentChange `json:"recent_changes"`
	ImageThumb    GetDataByArcadeResponseImage          `json:"image_thumb"`
	Images        []GetDataByArcadeResponseImage        `json:"images"`
}

type GetDataByArcadeResponseArcade struct {
	ID       int64  `json:"id"`
	TitleID  int64  `json:"title_id"`
	Quantity int64  `json:"quantity"`
	Version  string `json:"version"`
	Coin     int64  `json:"coin"`
	Eacoin   int64  `json:"eacoin"`
	Comment  string `json:"comment"`
	ShopID   int64  `json:"shop_id"`
	Order    int64  `json:"order"`
}

type GetDataByArcadeResponseImage struct {
	ID       int64  `json:"id"`
	Filename string `json:"filename"`
	URL      string `json:"url"`
	ShopID   int64  `json:"shop_id"`
}

type GetDataByArcadeResponseRecentChange struct {
	ID        int64  `json:"id"`
	Type      int64  `json:"type"`
	ShopID    int64  `json:"shop_id"`
	Username  string `json:"username"`
	Comment   string `json:"comment"`
	RevHash   string `json:"rev_hash"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type GetDataByArcadeResponseTitles struct {
	Name  map[string]string `json:"name"`
	Img   map[string]string `json:"img"`
	Order map[string]int64  `json:"order"`
}

func GetArcadeByCodeWithArcadeMap[T string | int | int64](arcadeCode T) (Arcade, error) {
	response, err := _get(fmt.Sprintf("https://map.bemanicn.com/shop/%v", arcadeCode))
	if err != nil {
		return Arcade{}, err
	}
	defer response.Body.Close()
	if response.StatusCode == 404 {
		return Arcade{}, fmt.Errorf("Arcade not found")
	}
	body, err := io.ReadAll(response.Body)
	if err != nil {
		return Arcade{}, err
	}
	var data GetDataByArcadeResponse
	err = sonic.Unmarshal(body, &data)
	if err != nil {
		return Arcade{}, err
	}
	province, _ := GetProvinceByCode(data.Props.Shop.ProvinceCode)
	city, _ := GetCityByCode(data.Props.Shop.CityCode)
	machineCount := 0
	for _, v := range data.Props.Shop.Arcades {
		if v.TitleID == 1 {
			machineCount += int(v.Quantity)
		}
	}
	return Arcade{
		ID:           int(data.Props.Shop.ID),
		Name:         data.Props.Shop.Name,
		MachineCount: machineCount,
		Province:     province,
		City:         city,
		Address:      data.Props.Shop.Address,
		UpdatedAt:    RFC3339ToTimestamp(data.Props.Shop.UpdatedAt),
	}, nil
}

func CheckArcadeExistByArcadeIdWithArcadeMap[T string | int | int64](arcadeCode T) bool {
	response, err := _get(fmt.Sprintf("https://map.bemanicn.com/shop/%v", arcadeCode))
	if err != nil {
		return false
	}
	defer response.Body.Close()
	return response.StatusCode == 200
}

// 从 ArcadeMap 拉取更新
func UpdateArcadeByArcadeIdWithArcadeMap[T string | int | int64](arcadeCode T) error {
	if !CheckArcadeExistByArcadeID(arcadeCode) {
		return fmt.Errorf("Arcade not found in database")
	}
	arcade, err := GetArcadeByCodeWithArcadeMap(arcadeCode)
	if err != nil {
		return err
	}
	localarcade, err := db.GetArcadeByArcadeID(arcadeCode)
	if err != nil {
		return err
	}
	if arcade.UpdatedAt <= localarcade.UpdatedAt {
		return nil
	}
	err = UpdateArcade(arcade)
	return nil
}

// 从 ArcadeMap 添加机厅
func AddArcadeByArcadeIdWithArcadeMap[T string | int | int64](arcadeCode T) error {
	if CheckArcadeExistByArcadeID(arcadeCode) {
		return fmt.Errorf("Arcade already exists in database")
	}
	arcade, err := GetArcadeByCodeWithArcadeMap(arcadeCode)
	if err != nil {
		return err
	}
	err = CreateArcade(arcade)
	return err
}

// 从 ArcadeMap 获取机厅列表
// 增量更新至本地数据库
func UpdateArcadeListWithArcadeMap() error {
	arcades, err := GetArcadeListWithArcadeMap()
	if err != nil {
		return err
	}
	localArcades, err := GetArcadeList()
	if err != nil {
		return err
	}
	// map[int]Arcade
	localArcadeIDs := make(map[int]Arcade)
	for _, localArcade := range localArcades {
		localArcadeIDs[localArcade.ID] = localArcade
	}
	for _, arcade := range arcades {
		// 从 localArcades 中查找是否存在
		if ok := localArcadeIDs[arcade.ID]; ok != (Arcade{}) {
			err := UpdateArcadeByArcadeIdWithArcadeMap(arcade.ID)
			if err != nil {
				continue
			}
		} else {
			err := AddArcadeByArcadeIdWithArcadeMap(arcade.ID)
			if err != nil {
				continue
			}
		}
	}
	return nil
}
